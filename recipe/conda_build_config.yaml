# conda_build_config.yaml is configuration for conda-build and detected by if
# named like that next to meta.yaml. conda-build can also be provided this
# explicitly via a flag documented like this.
#
#  --variant-config-files VARIANT_CONFIG_FILES
#
#     Additional variant config files to add. These yaml files can contain keys
#     such as `c_compiler` and `target_platform` to form a build matrix.
#
# Read more about this "variant config file" in
# https://docs.conda.io/projects/conda-build/en/latest/resources/variants.html.
#

# FIXME 1: Target platform?
#
#          We want our conda-build packaged outputs to be associated with a
#          specific platform. Is this setup automatically by setting target_goos
#          and target_goarch when referencing compiler('go')? Maybe? How do we
#          know?
#
#          I've considered if this is what target_platform is about, but, having
#          tried to zip that from conda_build_config.yaml along with target_goos
#          and target_goarch, I've failed. I figure something is taking
#          precedence, perhaps making the zip_keys provided have different
#          amount of values?
#
#          NOTE: keys listed under zip_keys must be lists with equal amounts of
#                elements.
#
# FIXME 2: dask-gateway-kerberos and platform specific run requirements.
#
#          How do we get two variants of dask-gateway-kerberos, one for
#          installations in windows, and one for other operating systems? We can
#          generate variations, but how do we make those variations be
#          associated with a platform?
#
#          For some reason, target_platform behaves a bit differently. I hoped
#          to use it to indicate that the conda-forge build should be meant for
#          a specific platform.
#
# python:
#   - "3.8"
#   - "3.9"
#   - "3.10"
